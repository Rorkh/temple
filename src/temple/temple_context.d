/**
 * Temple (C) Dylan Knutson, 2013, distributed under the:
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 */

module temple.temple_context;

import temple.temple;
import temple.output_stream;

public import std.variant : Variant;
private import std.array, std.string;

class TempleContext
{
private:
	Variant[string] vars;

	TempleFunc* yielded_template;

public:
	void partial(TempleFunc* temple_func) @property
	{
		yielded_template = temple_func;
	}

	auto partial() @property
	{
		return yielded_template;
	}

	Variant opDispatch(string op)() @property
	{
		return vars[op];
	}

	void opDispatch(string op, T)(T other) @property
	{
		vars[op] = other;
	}

	bool isSet(string name)
	{
		return (name in vars && vars[name] != Variant());
	}

	ref Variant var(string name)
	{
		if(name !in vars)
			vars[name] = Variant();

		return vars[name];
	}

	static string renderWith(string file)(TempleContext ctx = null)
	{
		if(ctx is null)
		{
			ctx = new TempleContext();
		}

		alias render_func = TempleFile!(file);
		auto buff = new AppenderOutputStream();
		render_func(buff, ctx);
		return buff.data();
	}

	string render(string file)()
	{
		return TempleContext.renderWith!(file)(this);
	}

	string yield()
	{
		auto buff = new AppenderOutputStream();
		scope(exit) { buff.clear(); }

		if(yielded_template is null)
		{
			return "";
		}
		else
		{
			(*yielded_template)(buff, this);
			return buff.data;
		}
	}
}